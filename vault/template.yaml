apiVersion: tmax.io/v1
kind: ClusterTemplate
metadata:
  name: single-vault-with-agent-template
shortDescription: "single hashicorp vault and sercret injector"
longDescription: "single hashicorp vault and sercret injector"
urlDescription: https://www.vaultproject.io/
imageUrl: "https://www.datocms-assets.com/2885/1620082933-blog-library-product-vault-logo.jpg"
provider: tmax
categories:
- vault
- hashicorp
- secret
parameters:
- name: APP_NAME
  displayName: AppName
  description: A Vault Name
  required: true
  valueType: string 
- name: NAMESPACE
  displayName: Namespace
  description: A Vault Namespace
  required: true   
  valueType: string
- name: SERVICE_TYPE
  displayName: Vault Service Type
  description: (ClusterIP / LoadBalancer)
  value: "ClusterIP"
  required: true
  valueType: string
- name: VAULT_STORAGE
  displayName: Vault Storage
  description: Vault Storage size
  value: 5Gi
  required: true
  valueType: string
- name: STORAGE_CLASS
  displayName: StorageClass
  description: Storage class name
  value: csi-cephfs-sc
  required: true
  valueType: string
- name: VAULT_RESOURCE_CPU
  displayName: VaultResourceCPU
  description: Vault Resource request, CPU (e.g., 1)
  value: 250m
  required: true
  valueType: string
- name: VAULT_RESOURCE_MEM
  displayName: VaultResourceMem
  description: Vault Resource request, Mem (e.g., 1Gi)
  value: 256Mi
  required: true
  valueType: string
objects:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}-agent-injector
    name: ${APP_NAME}-agent-injector-clusterrole
  rules:
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - mutatingwebhookconfigurations
    verbs:
    - get
    - list
    - watch
    - patch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ${APP_NAME}-agent-injector
    name: ${APP_NAME}-agent-injector-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: ${APP_NAME}-agent-injector-clusterrole
  subjects:
  - kind: ServiceAccount
    name: ${APP_NAME}-agent-injector
    namespace: ${NAMESPACE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ${APP_NAME}-agent-injector
      component: webhook
    name: ${APP_NAME}-agent-injector
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/name: ${APP_NAME}-agent-injector
        component: webhook
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: ${APP_NAME}
          app.kubernetes.io/name: ${APP_NAME}-agent-injector
          component: webhook
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: ${APP_NAME}
                  app.kubernetes.io/name: ${APP_NAME}-agent-injector
                  component: webhook
              topologyKey: kubernetes.io/hostname
        containers:
        - args:
          - agent-inject
          - 2>&1
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace        
          - name: AGENT_INJECT_LISTEN
            value: :8080
          - name: AGENT_INJECT_LOG_LEVEL
            value: info
          - name: AGENT_INJECT_VAULT_ADDR
            value: http://${APP_NAME}.$(NAMESPACE).svc:8200
          - name: AGENT_INJECT_VAULT_AUTH_PATH
            value: auth/kubernetes
          - name: AGENT_INJECT_VAULT_IMAGE
            value: hashicorp/vault:1.8.4
          - name: AGENT_INJECT_TLS_AUTO
            value: ${APP_NAME}-agent-injector-cfg
          - name: AGENT_INJECT_TLS_AUTO_HOSTS
            value: ${APP_NAME}-agent-injector-svc,${APP_NAME}-agent-injector-svc.$(NAMESPACE),${APP_NAME}-agent-injector-svc.$(NAMESPACE).svc
          - name: AGENT_INJECT_LOG_FORMAT
            value: standard
          - name: AGENT_INJECT_REVOKE_ON_SHUTDOWN
            value: "false"
          - name: AGENT_INJECT_CPU_REQUEST
            value: 250m
          - name: AGENT_INJECT_CPU_LIMIT
            value: 500m
          - name: AGENT_INJECT_MEM_REQUEST
            value: 64Mi
          - name: AGENT_INJECT_MEM_LIMIT
            value: 128Mi
          - name: AGENT_INJECT_DEFAULT_TEMPLATE
            value: map
          - name: AGENT_INJECT_TEMPLATE_CONFIG_EXIT_ON_RETRY_FAILURE
            value: "true"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: hashicorp/vault-k8s:0.14.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          name: sidecar-injector
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 100
        serviceAccountName: ${APP_NAME}-agent-injector
- apiVersion: admissionregistration.k8s.io/v1
  kind: MutatingWebhookConfiguration
  metadata:
    annotations:
      meta.helm.sh/release-name: ${APP_NAME}
      meta.helm.sh/release-namespace: ${NAMESPACE}
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}-agent-injector
    name: ${APP_NAME}-agent-injector-cfg  
  webhooks:
  - clientConfig:
      caBundle: ""
      service:
        name: ${APP_NAME}-agent-injector-svc
        namespace: ${NAMESPACE}
        path: /mutate
        port: 443
    failurePolicy: Ignore
    matchPolicy: Equivalent
    name: vault.hashicorp.com
    reinvocationPolicy: Never
    rules:
    - apiGroups:
      - ""
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - pods
    sideEffects: None
    admissionReviewVersions:
    - "v1beta1"
    - "v1"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ${APP_NAME}-agent-injector
    name: ${APP_NAME}-agent-injector-svc
  spec:
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/name: ${APP_NAME}-agent-injector
      component: webhook
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}-agent-injector
    name: ${APP_NAME}-agent-injector
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}
    name: ${APP_NAME}-server-binding
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    name: ${APP_NAME}
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}
    name: ${APP_NAME}-internal
  spec:
    clusterIP: None
    ports:
    - name: http
      port: 8200
      protocol: TCP
      targetPort: 8200
    - name: https-internal
      port: 8201
      protocol: TCP
      targetPort: 8201
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/name: ${APP_NAME}
      component: server
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}
    name: ${APP_NAME} 
  spec:
    ports:
    - name: http
      port: 8200
      protocol: TCP
      targetPort: 8200
    - name: https-internal
      port: 8201
      protocol: TCP
      targetPort: 8201
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/name: ${APP_NAME}
      component: server
    sessionAffinity: None
    type: ${SERVICE_TYPE}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-vault
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${VAULT_STORAGE}
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}
    name: ${APP_NAME}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/managed-by: template
      app.kubernetes.io/name: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/name: ${APP_NAME}
        component: server
    serviceName: ${APP_NAME}-internal
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: ${APP_NAME}
          app.kubernetes.io/name: ${APP_NAME}
          component: server
      spec:
        containers:
        - args:
          - "/usr/local/bin/docker-entrypoint.sh vault server -dev \n"
          command:
          - /bin/sh
          - -ec
          env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: VAULT_K8S_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: VAULT_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: VAULT_ADDR
            value: http://127.0.0.1:8200
          - name: VAULT_API_ADDR
            value: http://$(POD_IP):8200
          - name: SKIP_CHOWN
            value: "true"
          - name: SKIP_SETCAP
            value: "true"
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: VAULT_CLUSTER_ADDR
            value: https://$(HOSTNAME).${APP_NAME}-internal:8201
          - name: HOME
            value: /home/vault
          - name: VAULT_DEV_ROOT_TOKEN_ID
            value: root
          - name: VAULT_DEV_LISTEN_ADDRESS
            value: '[::]:8200'
          image: hashicorp/vault:1.8.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - sleep 5 && kill -SIGTERM $(pidof vault)
          name: vault
          ports:
          - containerPort: 8200
            name: http
            protocol: TCP
          - containerPort: 8201
            name: https-internal
            protocol: TCP
          - containerPort: 8202
            name: http-rep
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -ec
              - vault status -tls-skip-verify
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          securityContext:
            allowPrivilegeEscalation: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/vault
            name: home
          resources:
            limits:
              cpu: ${VAULT_RESOURCE_CPU}
              memory: ${VAULT_RESOURCE_MEM}
            requests:
              cpu: ${VAULT_RESOURCE_CPU}
              memory: ${VAULT_RESOURCE_MEM}  
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 100
        serviceAccountName: ${APP_NAME}
        terminationGracePeriodSeconds: 10
        volumes:
        - name: home
          persistentVolumeClaim:
            claimName: ${APP_NAME}-vault
    updateStrategy:
      type: OnDelete
  

