apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: s2i
  annotations:
    template-version: 5.0.6
    tested-operator-version: 0.2.5
spec:
  description: S2I Task
  params:
    - name: IMAGE_URL
      description: Image to be saved
    - description: The location of the s2i builder image.
      name: BUILDER_IMAGE
    - default: .
      description: The location of the path to run s2i from.
      name: PATH_CONTEXT
    - default: 'false'
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      name: TLSVERIFY
    - name: LOGLEVEL
      description: Log level when running the S2I binary
      default: '0'
    - name: PACKAGE_SERVER_URL
      description: URL (including protocol, ip, port, and path) of private package server (e.g., devpi, pypi, verdaccio, ...)
      default: ''
  workspaces:
    - name: git-source
      description: Git source directory
  steps:
    - name: update-image-url
      image: docker.io/tmaxcloudck/cicd-util:5.0.6
      imagePullPolicy: Always
      command:
        - /cicd-util
      args:
        - update-image-url
      env:
        - name: SOURCE_PATH
          value: $(workspaces.git-source.path)
        - name: IMAGE_URL
          value: $(params.IMAGE_URL)
        - name: TARGET_FILE
          value: $(workspaces.git-source.path)/image-url
    - name: generate
      image: docker.io/tmaxcloudck/cicd-util:5.0.6
      imagePullPolicy: Always
      script: |
        #!/bin/sh
        set -ex

        FILENAME=s2i.env
        touch $FILENAME

        if [ "$(inputs.params.PACKAGE_SERVER_URL)" != "" ]; then
          case "$(inputs.params.BUILDER_IMAGE)" in
            *python*) echo "PIP_INDEX_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME
                      echo "PIP_TRUSTED_HOST=*" >> $FILENAME ;;
            *django*) echo "PIP_INDEX_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME
                      echo "PIP_TRUSTED_HOST=*" >> $FILENAME ;;
            *nodejs*) echo "NPM_CONFIG_REGISTRY=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *tomcat*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *wildfly*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *jeus*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
          esac
        fi

        /usr/local/bin/s2i \
        --clearCache \
        --loglevel=$(inputs.params.LOGLEVEL) \
        -E $FILENAME \
        build $(inputs.params.PATH_CONTEXT) $(inputs.params.BUILDER_IMAGE) \
        --as-dockerfile /gen-source/Dockerfile.gen
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingdir: $(workspaces.git-source.path)
    - name: build
      image: quay.io/buildah/stable:v1.22.3
      script: |
        buildah \
        bud \
        --format \
        docker \
        --tls-verify=$(inputs.params.TLSVERIFY) \
        --storage-driver=vfs \
        --layers \
        -f \
        /gen-source/Dockerfile.gen \
        -t \
        $(cat $(workspaces.git-source.path)/image-url) \
        .
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingdir: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.22.3
      script: |
        #!/bin/bash

        IMAGE_URL=$(cat $(workspaces.git-source.path)/image-url)

        buildah \
        push \
        --tls-verify=$(inputs.params.TLSVERIFY) \
        --storage-driver=vfs \
        $IMAGE_URL \
        docker://$IMAGE_URL
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
