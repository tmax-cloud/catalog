apiVersion: tmax.io/v1
kind: ClusterTemplate
metadata:
  name: strimzi-kafka-template-in-cluster-no-ssl-metric
shortDescription: "Kafka Internal no ssl with prometheus metric Deployment"
longDescription: "Kafka Zookeeper no-SSL In-cluster Metric Deployment"
urlDescription: https://strimzi.io/
imageUrl: "https://i.pinimg.com/originals/6a/46/51/6a46514d46e0edd07ab4e80c828d60a8.png"
provider: tmax
categories:
- kafka
- zookeeper
- message
- strimzi
parameters:
- name: APP_NAME
  displayName: AppName
  description: A Kafka Name
  required: true 
- name: NAMESPACE
  displayName: Namespace
  description: Namespace
  required: true
- name: KAFKA_REPLICA_COUNT
  displayName: Kafka Replica Count
  description: Number of Kafka Broker
  value: 1
  required: true
- name: ZOOKEEPER_REPLICA_COUNT
  displayName: Zookeeper Replica Count
  description: Number of Zookeeper, Usually Same as KAFKA_REPLICA_COUNT
  value: 1
  required: true  
- name: KAFKA_STORAGE
  displayName: Kafka Storage
  description: Kafka Storage size
  value: 5Gi
  required: true
- name: ZOOKEEPER_STORAGE
  displayName: Zookeeper Storage
  description: Zookeeper Storage size
  value: 5Gi
  required: true  
- name: STORAGE_CLASS
  displayName: StorageClass
  description: Storage class name
  value: csi-cephfs-sc
  required: true
- name: KAFKA_RESOURCE_CPU
  displayName: KafkaResourceCPU
  description: Kafka Resource request, CPU (e.g., 1)
  value: 1
  required: true
- name: KAFKA_RESOURCE_MEM
  displayName: KafkaResourceMem
  description: Kafka Resource request, Mem (e.g., 1Gi)
  value: 1Gi
  required: true
- name: ZOOKEEPER_RESOURCE_CPU
  displayName: KafkaResourceCPU
  description: Kafka Resource request, CPU (e.g., 1)
  value: 1
  required: true
- name: ZOOKEEPER_RESOURCE_MEM
  displayName: KafkaResourceMem
  description: Kafka Resource request, Mem (e.g., 1Gi)
  value: 1Gi
  required: true             
objects:
- apiVersion: kafka.strimzi.io/v1beta2
  kind: Kafka
  metadata:
    name: ${APP_NAME}
  spec:
    kafka:
      version: 2.8.0
      replicas: ${KAFKA_REPLICA_COUNT}
      resources: 
        requests:
          memory: ${KAFKA_RESOURCE_MEM}
          cpu: ${KAFKA_RESOURCE_CPU}
        limits:
          memory: ${KAFKA_RESOURCE_MEM}
          cpu: ${KAFKA_RESOURCE_CPU}
      listeners:
        - name: plain
          port: 9092
          type: internal
          tls: false
      logging:
        type: inline
        loggers:
          log4j.logger.io.strimzi: "TRACE"
          log4j.logger.kafka: "DEBUG"
          log4j.logger.org.apache.kafka: "DEBUG"        
      config:
        offsets.topic.replication.factor: 1
        transaction.state.log.replication.factor: 1
        transaction.state.log.min.isr: 1
        log.message.format.version: "2.8"
        inter.broker.protocol.version: "2.8"
      storage:
        type: persistent-claim
        size: ${KAFKA_STORAGE}
        class: ${STORAGE_CLASS}
      metricsConfig:
        type: jmxPrometheusExporter
        valueFrom:
          configMapKeyRef:
            name: kafka-metrics
            key: kafka-metrics-config.yml  
    zookeeper:
      replicas: ${ZOOKEEPER_REPLICA_COUNT}
      resources:
        requests:
          memory: ${ZOOKEEPER_RESOURCE_MEM}
          cpu: ${ZOOKEEPER_RESOURCE_CPU}
        limits:
          memory: ${ZOOKEEPER_RESOURCE_MEM}
          cpu: ${ZOOKEEPER_RESOURCE_CPU}
      storage:
        type: persistent-claim
        size: ${ZOOKEEPER_STORAGE}
        class: ${STORAGE_CLASS}
      metricsConfig:
        type: jmxPrometheusExporter
        valueFrom:
          configMapKeyRef:
            name: kafka-metrics
            key: zookeeper-metrics-config.yml  
    entityOperator:
      topicOperator: {}
      userOperator: {}
    kafkaExporter:
      topicRegex: ".*"
      groupRegex: ".*"
- apiVersion: monitoring.coreos.com/v1
  kind: PodMonitor
  metadata:
    name: ${APP_NAME}-cluster-operator-metrics
    labels:
      app: strimzi
      release: prometheus
  spec:
    selector:
      matchLabels:
        strimzi.io/kind: cluster-operator
    namespaceSelector:
      matchNames:
        - ${NAMESPACE}
    podMetricsEndpoints:
    - path: /metrics
      port: http
  ---
- apiVersion: monitoring.coreos.com/v1
  kind: PodMonitor
  metadata:
    name: ${APP_NAME}-entity-operator-metrics
    labels:
      app: strimzi
      release: prometheus
  spec:
    selector:
      matchLabels:
        app.kubernetes.io/name: entity-operator
    namespaceSelector:
      matchNames:
        - ${NAMESPACE}
    podMetricsEndpoints:
    - path: /metrics
      port: healthcheck
  ---
- apiVersion: monitoring.coreos.com/v1
  kind: PodMonitor
  metadata:
    name: ${APP_NAME}-bridge-metrics
    labels:
      app: strimzi
      release: prometheus
  spec:
    selector:
      matchLabels:
        strimzi.io/kind: KafkaBridge
    namespaceSelector:
      matchNames:
        - ${NAMESPACE}
    podMetricsEndpoints:
    - path: /metrics
      port: rest-api
  ---
- apiVersion: monitoring.coreos.com/v1
  kind: PodMonitor
  metadata:
    name: ${APP_NAME}-kafka-resources-metrics
    labels:
      app: strimzi
      release: prometheus
  spec:
    selector:
      matchExpressions:
        - key: "strimzi.io/kind"
          operator: In
          values: ["Kafka", "KafkaConnect", "KafkaMirrorMaker", "KafkaMirrorMaker2"]
    namespaceSelector:
      matchNames:
        - ${NAMESPACE}
    podMetricsEndpoints:
    - path: /metrics
      port: tcp-prometheus
      relabelings:
      - separator: ;
        regex: __meta_kubernetes_pod_label_(strimzi_io_.+)
        replacement: $1
        action: labelmap
      - sourceLabels: [__meta_kubernetes_namespace]
        separator: ;
        regex: (.*)
        targetLabel: namespace
        replacement: $1
        action: replace
      - sourceLabels: [__meta_kubernetes_pod_name]
        separator: ;
        regex: (.*)
        targetLabel: kubernetes_pod_name
        replacement: $1
        action: replace
      - sourceLabels: [__meta_kubernetes_pod_node_name]
        separator: ;
        regex: (.*)
        targetLabel: node_name
        replacement: $1
        action: replace
      - sourceLabels: [__meta_kubernetes_pod_host_ip]
        separator: ;
        regex: (.*)
        targetLabel: node_ip
        replacement: $1
        action: replace      
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APP_NAME}-kafka-metrics
    labels:
      app: strimzi
  data:
    kafka-metrics-config.yml: |
      # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
      lowercaseOutputName: true
      rules:
      # Special cases and very specific rules
      - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
        name: kafka_server_$1_$2
        type: GAUGE
        labels:
         clientId: "$3"
         topic: "$4"
         partition: "$5"
      - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
        name: kafka_server_$1_$2
        type: GAUGE
        labels:
         clientId: "$3"
         broker: "$4:$5"
      - pattern: kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections
        name: kafka_server_$1_connections_tls_info
        type: GAUGE
        labels:
          listener: "$2"
          networkProcessor: "$3"
          protocol: "$4"
          cipher: "$5"
      - pattern: kafka.server<type=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
        name: kafka_server_$1_connections_software
        type: GAUGE
        labels:
          clientSoftwareName: "$2"
          clientSoftwareVersion: "$3"
          listener: "$4"
          networkProcessor: "$5"
      - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
        name: kafka_server_$1_$4
        type: GAUGE
        labels:
         listener: "$2"
         networkProcessor: "$3"
      - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)
        name: kafka_server_$1_$4
        type: GAUGE
        labels:
         listener: "$2"
         networkProcessor: "$3"
      # Some percent metrics use MeanRate attribute
      # Ex) kafka.server<type=(KafkaRequestHandlerPool), name=(RequestHandlerAvgIdlePercent)><>MeanRate
      - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate
        name: kafka_$1_$2_$3_percent
        type: GAUGE
      # Generic gauges for percents
      - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value
        name: kafka_$1_$2_$3_percent
        type: GAUGE
      - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value
        name: kafka_$1_$2_$3_percent
        type: GAUGE
        labels:
          "$4": "$5"
      # Generic per-second counters with 0-2 key/value pairs
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
      # Generic gauges with 0-2 key/value pairs
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
      # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
      # Note that these are missing the '_sum' metric!
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          "$6": "$7"
          quantile: "0.$8"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          quantile: "0.$6"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          quantile: "0.$4"
    zookeeper-metrics-config.yml: |
      # See https://github.com/prometheus/jmx_exporter for more info about JMX Prometheus Exporter metrics
      lowercaseOutputName: true
      rules:
      # replicated Zookeeper
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
        name: "zookeeper_$2"
        type: GAUGE
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+)><>(\\w+)"
        name: "zookeeper_$3"
        type: GAUGE
        labels:
          replicaId: "$2"
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(Packets\\w+)"
        name: "zookeeper_$4"
        type: COUNTER
        labels:
          replicaId: "$2"
          memberType: "$3"
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+)><>(\\w+)"
        name: "zookeeper_$4"
        type: GAUGE
        labels:
          replicaId: "$2"
          memberType: "$3"
      - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
        name: "zookeeper_$4_$5"
        type: GAUGE
        labels:
          replicaId: "$2"
          memberType: "$3"
